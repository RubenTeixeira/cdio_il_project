/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import controller.ExtendTokenController;
import domain.Token;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Afonso
 */
public class ExtendTokenGUI extends javax.swing.JFrame {

    private JFrame parentFrame;
    private ExtendTokenController controller;

    /**
     * Creates new form ExtendTokenGUI
     */
    public ExtendTokenGUI(JFrame parentFrame) {
        super("Group Epsilon - Extend Token");
        this.parentFrame = parentFrame;
        controller = new ExtendTokenController();
        fecharJanela();
        initComponents();

        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoTokenLBL = new javax.swing.JLabel();
        periodoExtensaoLBL = new javax.swing.JLabel();
        codigoTokenTXT = new javax.swing.JTextField();
        periodoExtensaoTXT = new javax.swing.JTextField();
        extensaoTokenBTN = new javax.swing.JButton();
        sairBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Estender Token");

        codigoTokenLBL.setText("Código do Token:");

        periodoExtensaoLBL.setText("Período de Extensão:");

        extensaoTokenBTN.setText("Estender");
        extensaoTokenBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extensaoTokenBTNActionPerformed(evt);
            }
        });

        sairBTN.setText("Sair");
        sairBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(extensaoTokenBTN)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(periodoExtensaoLBL)
                                .addComponent(codigoTokenLBL)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(codigoTokenTXT)
                                    .addComponent(periodoExtensaoTXT, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(sairBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codigoTokenLBL)
                    .addComponent(codigoTokenTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(periodoExtensaoLBL))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(periodoExtensaoTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extensaoTokenBTN)
                    .addComponent(sairBTN))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sairBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairBTNActionPerformed
        sair();
    }//GEN-LAST:event_sairBTNActionPerformed

    private void extensaoTokenBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extensaoTokenBTNActionPerformed
        if (codigoTokenTXT.getText() != null && periodoExtensaoTXT.getText() != null) {
            Token token = controller.getTokenDAO().getByCodigo(codigoTokenTXT.getText());
            if (token == null) {
                JOptionPane.showMessageDialog(ExtendTokenGUI.this, "Token inexistente", "Erro", JOptionPane.WARNING_MESSAGE);
            } else {
                /*String vec[]=token.getExpirationDate().split(".");
                Calendar c = Calendar.getInstance();
                c.set(Integer.parseInt(vec[0]), Integer.parseInt(vec[1]), Integer.parseInt(vec[2]));
                c.add(Calendar.DAY_OF_MONTH, Integer.parseInt(periodoExtensaoTXT.getText()));*/
                SimpleDateFormat sdf = new SimpleDateFormat("yy.mm.dd");
                Calendar c = Calendar.getInstance();
                try {
                    Date date = sdf.parse(token.getExpirationDate());
                    c.setTime(date);
                } catch (ParseException ex) {
                    Logger.getLogger(ExtendTokenGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                c.add(Calendar.DATE, Integer.parseInt(periodoExtensaoTXT.getText()));
                //SimpleDateFormat sdf = new SimpleDateFormat("dd.mm.yyyy");
                String expirationString = sdf.format(c.getTime());
                token.setExpirationDate(expirationString);
                if (controller.getTokenDAO().update(token)) {
                    this.dispose();
                    JOptionPane.showMessageDialog(ExtendTokenGUI.this, "Validade do token estendida com sucesso!\nValidade do token: " + token.getExpirationDate(), "Informação", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(ExtendTokenGUI.this, "Erro na inserção na base de dados", "Erro", JOptionPane.WARNING_MESSAGE);

                }
            }
        } else {
            JOptionPane.showMessageDialog(ExtendTokenGUI.this, "Preencha todos os campos", "Erro", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_extensaoTokenBTNActionPerformed
    private void fecharJanela() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                sair();
            }
        });
    }

    private void sair() {
        String[] options = new String[2];
        options[0] = "Sim";
        options[1] = "Não";
        int op = JOptionPane.showOptionDialog(ExtendTokenGUI.this, "Deseja cancelar a extensão do token?", "Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (op == 0) {
            this.dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel codigoTokenLBL;
    private javax.swing.JTextField codigoTokenTXT;
    private javax.swing.JButton extensaoTokenBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel periodoExtensaoLBL;
    private javax.swing.JTextField periodoExtensaoTXT;
    private javax.swing.JButton sairBTN;
    // End of variables declaration//GEN-END:variables
}
